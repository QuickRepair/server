#ifndef ACCOUNT_H
#define ACCOUNT_H

#include <string>
#include <list>
#include <memory>

class ContactInformation;
class Order;

/// @brief the super class of all account(CustomerAccount and MerchantAccount)
class Account
{
public:
	/// @param id: the unique identity of account, generated by system
	/// @param account: the phone number of an account
	/// @param password: password of the account
    Account(unsigned long id, std::string account, std::string password);
    virtual ~Account() = default;

    /// @brief Test if the given order belong to the account
    /// @return true if the order belong to the account, false if not
	virtual bool isMyOrder(std::weak_ptr<Order> order) const = 0;

	/// @brief Get order list of the account
	/// @return return the order list belong to the account
	virtual std::list<std::weak_ptr<Order>> myOrdersList() const = 0;

	/// @brief setters and getters
	unsigned long id() const;
	void setId(unsigned long id);
	const std::string &password() const;
	void setPassword(const std::string &password);
	const std::string &account() const;
	void setAccount(const std::string &userName);

protected:
	/// @brief load contanct information for the account, can only be called by factories
	virtual void loadContactInformation(std::list<std::shared_ptr<ContactInformation>> info) = 0;

	/// @brief load orders belong to the account, can noly be called by factories
	virtual void loadOrder(std::shared_ptr<Order> order) = 0;

    unsigned long int m_id;
	std::string m_account;
    std::string m_password;
};

#endif // ACCOUNT_H
